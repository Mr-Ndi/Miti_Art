definitions:
  dto.ClientRegisterRequest:
    properties:
      clientEmail:
        type: string
      clientFirstName:
        type: string
      clientOtherName:
        type: string
      clientPassword:
        type: string
    required:
    - clientEmail
    - clientFirstName
    - clientOtherName
    - clientPassword
    type: object
  dto.CreateOrderRequest:
    properties:
      productID:
        type: string
      quantity:
        type: integer
    required:
    - productID
    - quantity
    type: object
  dto.EditProductRequest:
    properties:
      category:
        type: string
      image_url:
        type: string
      material:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  dto.InvitationInput:
    properties:
      VendorEmail:
        example: vendor@example.com
        type: string
      VendorFirstName:
        example: John
        type: string
      VendorOtherName:
        example: Doe
        type: string
    required:
    - VendorEmail
    - VendorFirstName
    - VendorOtherName
    type: object
  dto.OrderResponse:
    properties:
      createdAt:
        type: string
      orderId:
        type: string
      productId:
        type: string
      productName:
        type: string
      quantity:
        type: integer
      status:
        type: string
      totalPrice:
        type: number
    type: object
  dto.ProductResponse:
    properties:
      category:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      material:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  dto.VendorRegisterRequest:
    properties:
      ShopName:
        type: string
      vendorPassword:
        type: string
      vendorTin:
        type: integer
    required:
    - ShopName
    - vendorPassword
    - vendorTin
    type: object
  dto.WishListRequest:
    properties:
      productID:
        type: string
    required:
    - productID
    type: object
info:
  contact: {}
  description: This is my API using Gin, GORM, and Swagger
  title: My API
  version: "1.0"
paths:
  /admin/edit-client:
    post:
      consumes:
      - application/json
      parameters:
      - description: Client update input
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Edit client info
      tags:
      - admin
  /admin/edit-vendor:
    post:
      consumes:
      - application/json
      parameters:
      - description: Vendor update input
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Edit vendor info
      tags:
      - admin
  /admin/eliminate-client:
    post:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a client
      tags:
      - admin
  /admin/eliminate-vendor:
    post:
      consumes:
      - application/json
      parameters:
      - description: Vendor ID
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a vendor
      tags:
      - admin
  /admin/view-clients:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: View all clients
      tags:
      - admin
  /admin/view-orders:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: View all orders
      tags:
      - admin
  /admin/view-products:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: View all products
      tags:
      - admin
  /admin/view-vendors:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: View all vendors
      tags:
      - admin
  /invite:
    post:
      consumes:
      - application/json
      description: Sends invitation token to a vendor
      parameters:
      - description: Invitation input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.InvitationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send vendor invitation
      tags:
      - admin
  /user/furniture:
    get:
      description: Fetches all available furniture products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all furniture
      tags:
      - client
  /user/furniture/{id}:
    get:
      description: Fetches details for a specific furniture item
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get furniture by ID
      tags:
      - client
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a token
      parameters:
      - description: Login input
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /user/my-orders:
    get:
      description: Gets a list of a user's orders with optional filters (authentication
        required)
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Order status
        in: query
        name: status
        type: string
      - description: Start date (RFC3339 format)
        in: query
        name: from
        type: string
      - description: End date (RFC3339 format)
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user orders
      tags:
      - client
  /user/orders:
    post:
      consumes:
      - application/json
      description: Places a new order for a given product and quantity (authentication
        required)
      parameters:
      - description: Order request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create an order
      tags:
      - client
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new client with email, name, and password
      parameters:
      - description: Client registration input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ClientRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new client
      tags:
      - client
  /user/wishlist:
    post:
      consumes:
      - application/json
      description: Adds a product to the authenticated user's wishlist (authentication
        required)
      parameters:
      - description: Wishlist request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.WishListRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add to wishlist
      tags:
      - client
  /vendor/edit-product/{id}:
    patch:
      consumes:
      - application/json
      description: Allows vendor to edit their product details
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Product update fields
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.EditProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Edit product details
      tags:
      - Vendor
  /vendor/my-product/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a product by ID for the vendor
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a single product by ID
      tags:
      - Vendor
  /vendor/register:
    post:
      consumes:
      - application/json
      description: Vendor registration using token and additional details
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Vendor registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VendorRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new vendor
      tags:
      - Vendor
  /vendor/remove-product/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a vendor's product by ID
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Vendor
  /vendor/required-product:
    get:
      consumes:
      - application/json
      description: Returns orders related to the vendor's products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderResponse'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get vendor's product orders
      tags:
      - Vendor
  /vendor/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a product with metadata and image (multipart form)
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product image
        in: formData
        name: image
        required: true
        type: file
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Category
        in: formData
        name: category
        required: true
        type: string
      - description: Material
        in: formData
        name: material
        required: true
        type: string
      - description: Price
        in: formData
        name: price
        required: true
        type: number
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload a product
      tags:
      - Vendor
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
